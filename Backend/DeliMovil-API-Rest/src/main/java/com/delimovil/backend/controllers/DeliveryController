package com.delimovil.backend.controllers;

import com.delimovil.backend.dto.DeliveryDTO;
import com.delimovil.backend.dto.DeliveryRequestDTO;
import com.delimovil.backend.services.interfaces.IDeliveryService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import java.util.List;

@RestController
@RequestMapping("/api/delivery")
public class DeliveryController {

    @Autowired
    private IDeliveryService deliveryService;

    // Obtener una lista de todos los repartidores registrados
    @GetMapping
    public ResponseEntity<List<DeliveryDTO>> findAllDeliveries() {
        return ResponseEntity.ok(deliveryService.findAll());
    }

    // Obtener un delivery por ID
    @GetMapping("/{id}")
    public ResponseEntity<DeliveryDTO> findDeliveryById(@PathVariable @Min(1) Integer id) {
        return ResponseEntity.ok(deliveryService.findById(id));
    }

    // Crear un nuevo delivery
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<DeliveryDTO> createDelivery(@Valid @RequestBody DeliveryRequestDTO delivery) {
        ResponseEntity.status(HttpStatus.CREATED).body(deliveryService.save(delivery));
    }

    // Actualizar un delivery existente
    @PatchMapping("/{id}")
    public ResponseEntity<DeliveryDTO> updateDelivery(@RequestBody DeliveryRequestDTO delivery, @PathVariable @Min(1) Integer id) {
        return ResponseEntity.ok(deliveryService.update(delivery, id));
    }

    // Eliminar un delivery por ID
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public ResponseEntity<Void> deleteDelivery(@PathVariable @Min(1) Integer id){
        this.deliveryService.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}
/*
   DeliveryController v2
    Mejorado los Endpoints y refactorizado
*/