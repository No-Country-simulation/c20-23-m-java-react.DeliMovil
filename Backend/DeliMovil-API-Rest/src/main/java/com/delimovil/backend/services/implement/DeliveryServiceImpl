package com.delimovil.backend.services.implement;

import com.delimovil.backend.dto.DeliveryDTO;
import com.delimovil.backend.dto.DeliveryRequestDTO;
import com.delimovil.backend.dto.RestaurantDTO;
import com.delimovil.backend.models.entity.Delivery;
import com.delimovil.backend.models.entity.Restaurant;
import com.delimovil.backend.repositories.IDeliveryRepository;
import com.delimovil.backend.services.interfaces.IDeliveryService;
import com.delimovil.backend.shared.exception.personalized.ModelNotFoundException;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class DeliveryServiceImpl implements IDeliveryService {

    @Autowired
    private IDeliveryRepository deliveryRepository;

    @Autowired
    private ModelMapper mapper;

    // Método para obtener todos los deliveries
    @Override
    @Transactional(readOnly = true)
    public List<DeliveryDTO> findAll() {
        return this.deliveryRepository.findAll()
                .stream()
                .map(res -> mapper.map(res, DeliveryDTO.class))
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public DeliveryDTO findById(Integer id){
        Delivery delivery = deliveryRepository.findById(id).orElseThrow(
                () -> new ModelNotFoundException(id, Delivery.class.getSimpleName()));

        return mapper.map(delivery, DeliveryDTO.class);
    }

    // Método para crear un nuevo delivery
    @Override
    @Transactional
    public DeliveryDTO save(DeliveryRequestDTO deliveryDTO){
        Delivery delivery = mapper.map(DeliveryDTO, Delivery.class);
        Delivery saveDelivery = this.deliveryRepository.save(delivery);
        return mapper.map(saveDelivery, DeliveryDTO.class);
    }

    @Override
    @Transactional
    public DeliveryDTO update(DeliveryRequestDTO deliveryDTO){
        Delivery delivery = mapper.map.(deliveryDTO, Delivery.class);
        Delivery saveDelivery = this.deliveryRepository.save(delivery);

        return mapper.map(saveDelivery, DeliveryDTO.class);
    }

    // Método para eliminar un delivery por id
    @Override
    @Transactional
    public DeliveryDTO update(DeliveryRequestDTO deliveryDTO, Integer id){
        Delivery DeliveryBD = this.deliveryRepository.findById(id).orElseThrow(
                () -> new ModelNotFoundException(id, Delivery.class.getSimpleName())
        );

        deliveryBD.setName(deliveryDTO.getName());
        deliveryBD.setDescription(deliveryDTO.getDescription());

        Delivery updatedDelivery = this.deliveryRepository.save(deliveryBD);

        return mapper.map(updatedDelivery, DeliveryDTO.class);
    }
    }


    /* DeliveryServiceImp v2
    Refactorizado el código completo
*/